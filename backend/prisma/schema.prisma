generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String    @id @default(cuid())
  username   String
  user_email String    @unique
  password   String
  contents   Content[]
  links      Link[]
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  Task       Task[]
}

model Content {
  content_id          String   @id @default(cuid())
  content_title       String
  content_description String
  content_link        String?
  user_id             String
  user                User     @relation(fields: [user_id], references: [user_id])
  tags                Tag[]    @relation("ContentTags")
  createdAt           DateTime @default(now())
  updateAt            DateTime @updatedAt
  type_id             String
  Type                Type     @relation("ContentType", fields: [type_id], references: [type_id]) // Relation field
}

enum ContentTypes {
  Instagram
  Twitter
  Youtube
  Medium
  Image
  Text
}

model Type {
  type_id   String       @id @default(cuid())
  type_name ContentTypes
  contents  Content[]    @relation("ContentType")
  createdAt DateTime     @default(now())
  updateAt  DateTime     @updatedAt
}

model Tag {
  tag_id    String    @id @default(cuid())
  name      String
  contents  Content[] @relation("ContentTags")
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Link {
  link_id   String   @id @default(cuid())
  hash      String   @unique
  user_id   String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  task_id          String    @id @default(cuid())
  task_title       String
  task_description String?
  task_due_date    DateTime
  task_due_time    DateTime?
  task_type        String
  task_priority    String
  completed        Boolean   @default(false)
  user_id          String
  user             User      @relation(fields: [user_id], references: [user_id])
  createdAt        DateTime  @default(now())
  updateAt         DateTime  @updatedAt
}
